name: Tests
on: [push, pull_request]

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build
    steps:
    - uses: actions/checkout@v2
    - name: Build all
      run: ./script/util/make.sh build -j2

  test:
    runs-on: ubuntu-20.04
    name: Test
    steps:
    - uses: actions/checkout@v2
    - name: Test all
      run: ./script/util/make.sh test-all -j2

  linter:
    runs-on: ubuntu-20.04
    name: Linter
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Run Linter
      run: ./script/util/make.sh install-check-tools check

  integration:
    runs-on: ubuntu-20.04
    name: Integration
    strategy:
      fail-fast: false
      matrix:
        buildargs: ["", "--build-arg=CONTAINERD_VERSION=main"] # released version & main version
        builtin: ["true", "false"]
        exclude:
        - buildargs: ""
          builtin: "true"
    steps:
    - name: Install htpasswd for setting up private registry
      run: sudo apt-get update -y && sudo apt-get --no-install-recommends install -y apache2-utils
    - uses: actions/checkout@v2
    - name: Run integration test
      env:
        DOCKER_BUILD_ARGS: ${{ matrix.buildargs }}
        BUILTIN_SNAPSHOTTER: ${{ matrix.builtin }}
      run: make integration

  test-optimize:
    runs-on: ubuntu-20.04
    name: Optimize
    strategy:
      fail-fast: false
      matrix:
        buildargs: ["", "--build-arg=CONTAINERD_VERSION=main"] # released version & main version
    steps:
    - name: Install htpasswd for setting up private registry
      run: sudo apt-get update -y && sudo apt-get --no-install-recommends install -y apache2-utils
    - uses: actions/checkout@v2
    - name: Run test for optimize subcommand of ctr-remote
      env:
        DOCKER_BUILD_ARGS: ${{ matrix.buildargs }}
      run: make test-optimize

  test-pullsecrets:
    runs-on: ubuntu-20.04
    name: PullSecrets
    strategy:
      fail-fast: false
      matrix:
        buildargs: ["", "--build-arg=CONTAINERD_VERSION=main"] # released version & main version
        builtin: ["true", "false"]
        exclude:
        - buildargs: ""
          builtin: "true"
    steps:
    - name: Install htpasswd for setting up private registry
      run: sudo apt-get update -y && sudo apt-get --no-install-recommends install -y apache2-utils
    - uses: actions/checkout@v2
    - name: Run test for pulling image from private registry on Kubernetes
      env:
        DOCKER_BUILD_ARGS: ${{ matrix.buildargs }}
        BUILTIN_SNAPSHOTTER: ${{ matrix.builtin }}
      run: make test-pullsecrets

  test-criauth:
    runs-on: ubuntu-20.04
    name: CRIAuth
    strategy:
      fail-fast: false
      matrix:
        buildargs: ["", "--build-arg=CONTAINERD_VERSION=main"] # released version & main version
        builtin: ["true", "false"]
        exclude:
        - buildargs: ""
          builtin: "true"
    steps:
    - name: Install htpasswd for setting up private registry
      run: sudo apt-get update -y && sudo apt-get --no-install-recommends install -y apache2-utils
    - uses: actions/checkout@v2
    - name: Run test for pulling image from private registry on Kubernetes with CRI keychain mode
      env:
        DOCKER_BUILD_ARGS: ${{ matrix.buildargs }}
        BUILTIN_SNAPSHOTTER: ${{ matrix.builtin }}
      run: make test-criauth

  test-cri-containerd:
    runs-on: ubuntu-20.04
    name: CRIValidationContainerd
    strategy:
      fail-fast: false
      matrix:
        buildargs: ["", "--build-arg=CONTAINERD_VERSION=main"] # released version & main version
        builtin: ["true", "false"]
        exclude:
        - buildargs: ""
          builtin: "true"
    steps:
    - uses: actions/checkout@v2
    - name: Validate containerd through CRI
      env:
        DOCKER_BUILD_ARGS: ${{ matrix.buildargs }}
        BUILTIN_SNAPSHOTTER: ${{ matrix.builtin }}
      run: make test-cri-containerd

  test-cri-cri-o:
    runs-on: ubuntu-20.04
    name: CRIValidationCRIO
    steps:
    - uses: actions/checkout@v2
    - name: Validate CRI-O through CRI
      run: make test-cri-o

  test-k3s:
    runs-on: ubuntu-20.04
    name: K3S
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.16.x'
    - name: Install k3d
      run: |
        wget -q -O - https://raw.githubusercontent.com/rancher/k3d/v4.4.4/install.sh | bash
    - name: Install htpasswd for setting up private registry
      run: sudo apt-get update -y && sudo apt-get --no-install-recommends install -y apache2-utils
    - name: Install yq
      run: |
        sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
    - uses: actions/checkout@v2
    - name: Run test with k3s
      run: make test-k3s

  #
  # Project checks
  # NOTE: Jobs for project checks commonly used in containerd projects
  # See https://github.com/containerd/project-checks
  #

  project:
    name: Project Checks
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.x'
      - uses: actions/checkout@v2
        with:
          path: src/github.com/containerd/stargz-snapshotter
          fetch-depth: 25
      - uses: containerd/project-checks@v1
        with:
          working-directory: src/github.com/containerd/stargz-snapshotter
